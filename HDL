# https://smorabit.github.io/blog/2021/velocyto/
# by Sam  Morabito, 2021
# assuming that you have some Seurat object called seurat_obj: in Seurat v 5



# save metadata table:
seurat_obj$barcode <- colnames(seurat_obj)
seurat_obj$UMAP_1 <- seurat_obj@reductions$umap@cell.embeddings[,1]
seurat_obj$UMAP_2 <- seurat_obj@reductions$umap@cell.embeddings[,2]
write.csv(seurat_obj@meta.data, file='metadata.csv', quote=F, row.names=F)


# write expression counts matrix
library(Matrix)
counts_matrix <- GetAssayData(seurat_obj, assay='RNA', slot='counts')
writeMM(counts_matrix, file=paste0(out_data_dir, 'counts.mtx'))

# write dimesnionality reduction matrix, in this example case pca matrix
write.csv(seurat_obj@reductions$pca@cell.embeddings, file='pca.csv', quote=F, row.names=F)

# write gene names
write.table(
  data.frame('gene'=rownames(counts_matrix)),file='gene_names.csv',
  quote=F,row.names=F,col.names=F
)

## in python 3.8 with scVelo

import scanpy as sc
import anndata
from scipy import io
from scipy.sparse import coo_matrix, csr_matrixㄍㄩㄛ
import numpy as np
import os
import pandas as pd

# load sparse matrix:
X = io.mmread("counts.mtx")

# create anndata object
adata = anndata.AnnData(
    X=X.transpose().tocsr()
)

# load cell metadata:
cell_meta = pd.read_csv("metadata.csv")

# load gene names:
with open("gene_names.csv", 'r') as f:
    gene_names = f.read().splitlines()

# set anndata observations and index obs by barcodes, var by gene names
adata.obs = cell_meta
adata.obs.index = adata.obs['barcode']
adata.var.index = gene_names

# load dimensional reduction:
pca = pd.read_csv("pca.csv")
pca.index = adata.obs.index

# set pca and umap
adata.obsm['X_pca'] = pca.to_numpy()
adata.obsm['X_umap'] = np.vstack((adata.obs['UMAP_1'].to_numpy(), adata.obs['UMAP_2'].to_numpy())).T

# plot a UMAP colored by sampleID to test:
sc.pl.umap(adata, color=['seurat_clusters'], frameon=False, save=True)

# save dataset as anndata format
adata.write('my_data.h5ad')


# reload dataset
adata = sc.read_h5ad('my_data.h5ad')

import scvelo as scv
import scanpy as sc
import cellrank as cr
import numpy as np
import pandas as pd
import anndata as ad

scv.settings.verbosity = 3
scv.settings.set_figure_params('scvelo', facecolor='white', dpi=100, frameon=False)
cr.settings.verbosity = 2

ldata1 = scv.read('cellranger/WT-1/velocyto/WT-1.loom', cache=True)
ldata2 = scv.read('cellranger/WT-2/velocyto/WT-2.loom', cache=True)

#rewrite barcode to match the ones of adata
barcodes=[bc.split(':')[1] for bc in ldata1.obs.index.tolist()]
barcodes=['WT1_'+bc[0:len(bc)-1]+'-1' for bc in barcodes]
ldata1.obs.index=barcodes

barcodes=[bc.split(':')[1] for bc in ldata2.obs.index.tolist()]
barcodes=['WT2_'+bc[0:len(bc)-1]+'-1' for bc in barcodes]
ldata2.obs.index=barcodes

# make variable names unique
ldata1.var_names_make_unique()
ldata2.var_names_make_unique()

# rewrite obs index of merged loom
ldata_cell=ldata.obs.index.tolist()
ldata_cell=[bc[0:len(bc)-2]for bc in ldata_cell]
ldata.obs.index=ldata_cell

# subset ldata or adata for merge (here subset ldata for adata)
adata_cell=adata.obs.index.tolist()
adata_gene=adata.var.index.tolist()

ldata_cell=ldata.obs.index.tolist()
ldata_gene=ldata.var.index.tolist()

# if the dimention of ldata different from adata
inter_cell=list(set(ldata_cell) & set(adata_cell))
inter_gene=list(set(ldata_gene) & set(adata_gene))

adata_sub=adata[adata.obs.index.isin(inter_cell)]
adata_sub=adata_sub[:,adata_sub.var.index.isin(inter_gene)]

ldata_sub=ldata[ldata.obs.index.isin(inter_cell)]
ldata_sub=ldata_sub[:,ldata_sub.var.index.isin(inter_gene)]

adata_sub = scv.utils.merge(adata_sub, ldata_sub)


scv.pl.proportions(adata, groupby='celltype_full')
# pre-process
scv.pp.filter_and_normalize(adata)
scv.pp.moments(adata)

# pre-process
scv.pp.filter_and_normalize(adata)
scv.pp.moments(adata)


# compute velocity
scv.tl.velocity(adata, mode='stochastic')
scv.tl.velocity_graph(adata)

scv.pl.velocity_embedding(adata, basis='umap', frameon=False, save='embedding.pdf')

scv.pl.velocity_embedding_grid(adata, basis='umap', color='celltype', save='embedding_grid.pdf', title='', scale=0.25)

scv.pl.velocity_embedding_stream(adata, basis='umap', color=['celltype', 'condition'], save='embedding_stream.pdf', title='')


