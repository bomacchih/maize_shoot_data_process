ï¼ƒ Exploring gene expression patterns using clustering methods
# https://tavareshugo.github.io/data-carpentry-rnaseq/04b_rnaseq_clustering.html


XGE202122_leaf_SCT_data<-AggregateExpression(XGE202122_S5_leaf_SCT_harmony, assay="SCT", slot="data")
trans_cts_SCT_all<-as.data.frame(XGE202122_leaf_SCT_data$SCT)
trans_cts_SCT_leaf<-trans_cts_SCT_all[,1:5]

trans_cts_SCT_leaf  <- trans_cts_SCT_leaf[rowSums(trans_cts_SCT_leaf[, (ncol(trans_cts_SCT_leaf)-4):ncol(trans_cts_SCT_leaf)]) != 0, ]

trans_cts_SCT_leaf$gene<-rownames(trans_cts_SCT_leaf)
trans_cts_SCT_leaf <- trans_cts_SCT_leaf[, c(ncol(trans_cts_SCT_leaf), 1:(ncol(trans_cts_SCT_leaf) - 1))]


trans_cts_SCT_leaf <- as.tibble(trans_cts_SCT_leaf)

trans_cts_mean_SCT_leaf <- trans_cts_SCT_leaf %>% 
 pivot_longer(cols = SAM:P5, names_to = "sample", values_to = "cts")  %>% 
 full_join(sample_table, by=("sample")) %>% 
 # filter(gene %in% candidate_genes) %>% 
 group_by(gene) %>% 
 mutate(cts_scaled = (cts - mean(cts))/sd(cts)) %>% 
 group_by(gene, domain) %>% 
 summarise(mean_cts_scaled = mean(cts_scaled), nrep = n()) %>% 
 ungroup()

hclust_matrix_RNA_averaged_all_p005 <- trans_cts_RNA_averaged_all %>%
    mutate(gene = rownames(.)) %>%
    filter(gene %in% significant_markers_RNA_all) %>%
    column_to_rownames(var = "gene") %>%  # Retain gene names as rownames
    as.matrix()



hclust_matrix_SCT_leaf <- hclust_matrix_SCT_leaf %>% 
    t() %>% 
    scale() %>% 
    t()

gene_dist_SCT_leaf <- dist(hclust_matrix_SCT_leaf)

gene_hclust_SCT_leaf <- hclust(gene_dist_SCT_leaf, method = "complete")

plot(gene_hclust_SCT_leaf, labels = FALSE, main="title")

gene_cluster_SCT_leaf <- cutree(gene_hclust_SCT_leaf, k = 5) %>% 
     enframe() %>% 
    rename(gene = name, cluster = value)
head(gene_cluster_SCT_leaf)


trans_cts_cluster_SCT_leaf <- trans_cts_mean_SCT_leaf %>% 
  inner_join(gene_cluster_SCT_leaf, by = "gene")

head(trans_cts_cluster_SCT_leaf)

trans_cts_cluster_SCT_leaf$domain <- factor(trans_cts_cluster_SCT_leaf$domain, 
                                   levels = c("SAM", "P1-P2", "P3", "P4", "P5", "coleoptile","co-v"))

trans_cts_cluster_SCT_averaged_all %>% 
     ggplot(aes(domain, mean_cts_scaled)) +
     geom_line(aes(group = gene), alpha = 0.3) +  # Plot individual gene lines with lower opacity
     geom_line(stat = "summary", fun = "median", colour = "red", linewidth = 1, group = 1) +  # Highlight the median line
     facet_grid(cols = vars(cluster)) +  # Create facets by cluster
     theme_minimal() +  # Clean theme for better visualization
     theme(
       panel.grid.minor = element_blank(),  # Remove minor grid lines
       panel.grid.major = element_line(colour = "grey80"),  # Keep subtle major grid lines
       axis.text.x = element_text(angle = 45, hjust = 1)
     )+ggtitle("Clusters of gene expression trends of DEG (adj-p<0.05)")


================================================================================

# Calculate the distance between each gene and the median trend of its cluster
calculate_distance <- function(gene_profile, median_profile) {
  return(sqrt(sum((gene_profile - median_profile)^2)))  # Euclidean distance
}

# Assume your data is in a data frame called `trans_cts_cluster_RNA_averaged_all`
# Example of data structure:
# | gene       | domain     | mean_cts_scaled | cluster |
# |------------|------------|-----------------|---------|
# | XLOC-043773| P1-P2      | -0.101          | 1       |
# | XLOC-043773| P3         | -0.101          | 1       |


median_trends <- trans_cts_cluster_RNA_averaged_all %>%
    group_by(cluster, domain) %>%
    summarize(median_expr = median(mean_cts_scaled, na.rm = TRUE)) %>%
    pivot_wider(names_from = domain, values_from = median_expr)

median_plot_data <- median_trends %>%
    pivot_longer(cols = -cluster, names_to = "domain", values_to = "median_expression")


x<-trans_cts_cluster_RNA_averaged_all[,1:3]

y <- x %>%
    pivot_wider(names_from = domain, values_from = mean_cts_scaled)

gene_cluster_info <- trans_cts_cluster_RNA_averaged_all%>% distinct(gene, cluster)

y <- y %>% left_join(gene_cluster_info, by = "gene")
y$distance_to_median <- apply(y, 1, function(row) {
    cluster_id <- row["cluster"]
    gene_data <- as.numeric(row[!(names(row) %in% c("gene", "cluster"))])  # Extract gene data
    median_data <- median_trends[median_trends$cluster == cluster_id, -which(names(median_trends) == "cluster")]
    calculate_distance(gene_data, as.numeric(median_data))
})

top_genes <- y[order(y$cluster, y$distance_to_median), ]
top_genes <- do.call(rbind, lapply(split(top_genes, top_genes$cluster), function(subset) {
    subset[1:5, ]  # Select top 5 genes per cluster
}))

representative_genes <- top_genes %>%
    group_by(cluster) %>%
    slice_min(order_by = distance_to_median, n = 1) %>%
    ungroup()

median_plot_data <- median_trends %>%
    pivot_longer(cols = -cluster, names_to = "domain", values_to = "median_expression")

plot_data <- y %>%
    filter(gene %in% representative_genes$gene)

plot_data_long<-plot_data[, 1:9] %>% 
    pivot_longer(
        cols=c(-cluster, -gene), 
        names_to="domain",
        values_to = "Expression"
)

desired_order <- c("SAM", "P1-P2", "P3", "P4", "P5", "coleoptile", "co-v")
plot_data_long <- plot_data_long %>%
    mutate(domain = factor(domain, levels = desired_order))

median_plot_data <- median_plot_data %>%
    mutate(domain = factor(domain, levels = desired_order))

desired_order_cluster<-c("7", "3","6","4","5","2","1")

plot_data_long <- plot_data_long %>%
    mutate(cluster = factor(cluster, levels = desired_order_cluster))

ggplot(plot_data_long, aes(x = domain, y = Expression, group = cluster, color = "Gene Expression")) +
    geom_line() +
    geom_line(data = median_plot_data, aes(x = domain, y = median_expression, group = cluster, color = "Median Trend"), 
              size = 1, linetype = "dashed") +
    facet_wrap(~ cluster, scales = "free_y") +  # Separate panels for each cluster
    theme_minimal() +
    labs(title = "Representative Gene Expression vs. Median Trend for Each Cluster",
         x = "Domain",
         y = "Scaled Gene Expression",
         color = "Legend") +
    scale_color_manual(values = c("Gene Expression" = "blue", "Median Trend" = "red"))
